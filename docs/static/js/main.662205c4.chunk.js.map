{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trimInput","trim","length","categories","placeholder","type","value","onChange","target","getGifs","category","a","URL","encodeURI","fetch","resp","json","data","map","gif","id","title","url","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","gifs","GifGridItem","className","src","alt","GifGrid","img","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAAYL,EAAWM,OAEzBD,EAAUE,OAAS,IAEvBT,GAAc,SAACU,GAAD,OAAiBH,GAAjB,mBAA+BG,OAC7CP,EAAc,MAId,SACE,uBACEQ,YAAY,eACZC,KAAK,OACLC,MAAOX,EACPY,SApBoB,SAACT,GACzBF,EAAcE,EAAEU,OAAOF,a,+BCMZG,EAbF,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACRC,EADQ,iDAE8BC,UAAUH,GAFxC,+DAGKI,MAAMF,GAHX,cAGRG,EAHQ,gBAISA,EAAKC,OAJd,uBAINC,EAJM,EAINA,KAJM,kBAMPA,EAAKC,KAAI,SAACC,GAAD,MAAU,CACxBC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAKH,EAAII,OAAOC,iBAAiBF,SATrB,2CAAH,sDCqBEG,EAlBM,SAACf,GACpB,MAA0BhB,mBAAS,CACjCuB,KAAM,GACNS,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRpB,EAAQC,GAAUoB,MAAK,SAACC,GACtBH,EAAS,CACPX,KAAMc,EACNL,SAAS,SAGZ,CAAChB,IAEGiB,GCRMK,EARK,SAAC,GAAqB,EAApBZ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC/B,OACE,oBAAIW,UAAU,sDAAd,SACE,qBAAKC,IAAKZ,EAAKa,IAAKd,OCiBXe,EAlBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SACjB,EAAgCe,EAAaf,GAA/BqB,EAAd,EAAQd,KAAYS,EAApB,EAAoBA,QAEpB,OACE,sBAAKO,UAAU,WAAf,UACE,6BAAKvB,IAEJgB,GAAW,mBAAGO,UAAU,mCAAb,qBAEZ,oBAAIA,UAAU,YAAd,SACGF,EAAKb,KAAI,SAACmB,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIjB,aCOjBkB,EAlBM,WACnB,MAAoC5C,mBAAS,CAAC,eAA9C,mBAAOS,EAAP,KAAmBV,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,kCACGU,EAAWe,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAASA,SAAUA,GAAeA,Y,MCT5C6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.662205c4.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const trimInput = inputValue.trim()\n\n    if (trimInput.length < 2) return\n\n    setCategories((categories) => [trimInput, ...categories])\n    setInputValue('')\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        placeholder=\"Add category\"\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      ></input>\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n","const getGifs = async (category) => {\n  const URL = \n    `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=cWowIkJNFHC2jPrkSx0MxW1yvAJYEqM9`\n  const resp = await fetch(URL)\n  const { data } = await resp.json()\n\n  return data.map((gif) => ({\n    id: gif.id,\n    title: gif.title,\n    url: gif.images.downsized_medium.url,\n  }))\n}\n\nexport default getGifs\n","import { useEffect, useState } from 'react'\nimport getGifs from '../helpers/getGifs'\n\nconst useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  })\n\n  useEffect(() => {\n    getGifs(category).then((gifs) => {\n      setState({\n        data: gifs,\n        loading: false,\n      })\n    })\n  }, [category])\n\n  return state\n}\n\nexport default useFetchGifs\n\n/**\n * Los custom hooks funcionan como functional components, pero no retornan un JSX\n */\n","import React from 'react'\n\nconst GifGridItem = ({id, title, url}) => {\n  return (\n    <li className=\"gif-cards__card animate__animated animate__fadeInUp\">\n      <img src={url} alt={title} />\n    </li>\n  )\n} \n\nexport default GifGridItem\n","import React from 'react'\nimport useFetchGifs from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem'\n\nconst GifGrid = ({ category }) => {\n  const { data: gifs, loading } = useFetchGifs(category)\n\n  return (\n    <div className=\"category\">\n      <h3>{category}</h3>\n\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n      <ol className=\"gif-cards\">\n        {gifs.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </ol>\n    </div>\n  )\n}\n\nexport default GifGrid\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport GifGrid  from './components/GifGrid'\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['The Office'])\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <section>\n        {categories.map((category) => (\n          <GifGrid category={category} key={category} />\n        ))}\n      </section>\n    </>\n  )\n}\n\nexport default GifExpertApp\n\n/**\n * Cada elemento en una lista debe tener una \"key\" prop única.\n * Se recomienda que esta \"key\" no sea el índice del elemento, ya que si se modifica el array pueden producirse errores\n */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.scss';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}